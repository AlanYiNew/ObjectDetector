// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "example.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic example::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic example::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> example::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> example::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> example::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> example::ap_const_lv1_1 = "1";
const sc_lv<32> example::ap_const_lv32_1 = "1";
const sc_lv<1> example::ap_const_lv1_0 = "0";
const sc_lv<6> example::ap_const_lv6_0 = "000000";
const sc_lv<6> example::ap_const_lv6_32 = "110010";
const sc_lv<6> example::ap_const_lv6_1 = "1";
const sc_lv<32> example::ap_const_lv32_5 = "101";

example::example(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_TREADY);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_58_p2 );
    sensitive << ( ap_sig_bdd_47 );
    sensitive << ( ap_sig_ioackin_B_TREADY );

    SC_METHOD(thread_B_TDATA);
    sensitive << ( A_TDATA );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_58_p2 );
    sensitive << ( ap_sig_bdd_47 );

    SC_METHOD(thread_B_TVALID);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_58_p2 );
    sensitive << ( ap_sig_bdd_47 );
    sensitive << ( ap_reg_ioackin_B_TREADY );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_58_p2 );
    sensitive << ( ap_sig_bdd_47 );
    sensitive << ( ap_sig_ioackin_B_TREADY );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_58_p2 );
    sensitive << ( ap_sig_bdd_47 );
    sensitive << ( ap_sig_ioackin_B_TREADY );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_100);
    sensitive << ( B_TREADY );
    sensitive << ( ap_sig_bdd_47 );

    SC_METHOD(thread_ap_sig_bdd_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_40);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_47);
    sensitive << ( A_TVALID );
    sensitive << ( exitcond_fu_58_p2 );

    SC_METHOD(thread_ap_sig_bdd_99);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_58_p2 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_40 );

    SC_METHOD(thread_ap_sig_ioackin_B_TREADY);
    sensitive << ( B_TREADY );
    sensitive << ( ap_reg_ioackin_B_TREADY );

    SC_METHOD(thread_exitcond_fu_58_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_58_p2 );
    sensitive << ( ap_sig_bdd_47 );
    sensitive << ( ap_sig_ioackin_B_TREADY );
    sensitive << ( i_reg_47 );

    SC_METHOD(thread_i_1_fu_64_p2);
    sensitive << ( i_reg_47 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_58_p2 );
    sensitive << ( ap_sig_bdd_47 );
    sensitive << ( ap_sig_ioackin_B_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    ap_reg_ioackin_B_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "example_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_TDATA, "(port)A_TDATA");
    sc_trace(mVcdFile, A_TVALID, "(port)A_TVALID");
    sc_trace(mVcdFile, A_TREADY, "(port)A_TREADY");
    sc_trace(mVcdFile, B_TDATA, "(port)B_TDATA");
    sc_trace(mVcdFile, B_TVALID, "(port)B_TVALID");
    sc_trace(mVcdFile, B_TREADY, "(port)B_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_20, "ap_sig_bdd_20");
    sc_trace(mVcdFile, i_1_fu_64_p2, "i_1_fu_64_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_40, "ap_sig_bdd_40");
    sc_trace(mVcdFile, exitcond_fu_58_p2, "exitcond_fu_58_p2");
    sc_trace(mVcdFile, ap_sig_bdd_47, "ap_sig_bdd_47");
    sc_trace(mVcdFile, ap_sig_ioackin_B_TREADY, "ap_sig_ioackin_B_TREADY");
    sc_trace(mVcdFile, i_reg_47, "i_reg_47");
    sc_trace(mVcdFile, ap_reg_ioackin_B_TREADY, "ap_reg_ioackin_B_TREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_100, "ap_sig_bdd_100");
    sc_trace(mVcdFile, ap_sig_bdd_99, "ap_sig_bdd_99");
#endif

    }
    mHdltvinHandle.open("example.hdltvin.dat");
    mHdltvoutHandle.open("example.hdltvout.dat");
}

example::~example() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void example::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_B_TREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_99.read()) {
            if (!(ap_sig_bdd_47.read() || (esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_B_TREADY.read())))) {
                ap_reg_ioackin_B_TREADY = ap_const_logic_0;
            } else if (ap_sig_bdd_100.read()) {
                ap_reg_ioackin_B_TREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_bdd_47.read() || (esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_B_TREADY.read()))))) {
        i_reg_47 = i_1_fu_64_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_47 = ap_const_lv6_0;
    }
}

void example::thread_A_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
         !(ap_sig_bdd_47.read() || (esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_B_TREADY.read()))))) {
        A_TREADY = ap_const_logic_1;
    } else {
        A_TREADY = ap_const_logic_0;
    }
}

void example::thread_B_TDATA() {
    B_TDATA = (!A_TDATA.read().is_01() || !ap_const_lv32_5.is_01())? sc_lv<32>(): (sc_biguint<32>(A_TDATA.read()) + sc_biguint<32>(ap_const_lv32_5));
}

void example::thread_B_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
         !ap_sig_bdd_47.read() && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_B_TREADY.read()))) {
        B_TVALID = ap_const_logic_1;
    } else {
        B_TVALID = ap_const_logic_0;
    }
}

void example::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !(ap_sig_bdd_47.read() || (esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_B_TREADY.read()))) && 
         !esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void example::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void example::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !(ap_sig_bdd_47.read() || (esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_B_TREADY.read()))) && 
         !esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void example::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void example::thread_ap_sig_bdd_100() {
    ap_sig_bdd_100 = (!ap_sig_bdd_47.read() && esl_seteq<1,1,1>(ap_const_logic_1, B_TREADY.read()));
}

void example::thread_ap_sig_bdd_20() {
    ap_sig_bdd_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void example::thread_ap_sig_bdd_40() {
    ap_sig_bdd_40 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void example::thread_ap_sig_bdd_47() {
    ap_sig_bdd_47 = (esl_seteq<1,1,1>(A_TVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0));
}

void example::thread_ap_sig_bdd_99() {
    ap_sig_bdd_99 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0));
}

void example::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_40.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void example::thread_ap_sig_ioackin_B_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_B_TREADY.read())) {
        ap_sig_ioackin_B_TREADY = B_TREADY.read();
    } else {
        ap_sig_ioackin_B_TREADY = ap_const_logic_1;
    }
}

void example::thread_exitcond_fu_58_p2() {
    exitcond_fu_58_p2 = (!i_reg_47.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_47.read() == ap_const_lv6_32);
}

void example::thread_i_1_fu_64_p2() {
    i_1_fu_64_p2 = (!i_reg_47.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_47.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void example::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((!(ap_sig_bdd_47.read() || (esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_B_TREADY.read()))) && !esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else if ((esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && !(ap_sig_bdd_47.read() || (esl_seteq<1,1,1>(exitcond_fu_58_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_B_TREADY.read()))))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void example::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TDATA\" :  \"" << A_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TVALID\" :  \"" << A_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_TREADY\" :  \"" << A_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TDATA\" :  \"" << B_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TVALID\" :  \"" << B_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_TREADY\" :  \"" << B_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

