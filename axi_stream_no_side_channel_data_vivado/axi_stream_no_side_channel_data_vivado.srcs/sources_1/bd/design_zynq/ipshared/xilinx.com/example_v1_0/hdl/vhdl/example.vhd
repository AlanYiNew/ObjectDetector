-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=13.333333,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.000000,HLS_SYN_LAT=51,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=52}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal i_1_fu_64_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_40 : BOOLEAN;
    signal exitcond_fu_58_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_47 : BOOLEAN;
    signal ap_sig_ioackin_B_TREADY : STD_LOGIC;
    signal i_reg_47 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ioackin_B_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_100 : BOOLEAN;
    signal ap_sig_bdd_99 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_B_TREADY assign process. --
    ap_reg_ioackin_B_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_99) then
                    if (not((ap_sig_bdd_47 or ((exitcond_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY))))) then 
                        ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_100) then 
                        ap_reg_ioackin_B_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_47 assign process. --
    i_reg_47_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_58_p2 = ap_const_lv1_0) and not((ap_sig_bdd_47 or ((exitcond_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))))) then 
                i_reg_47 <= i_1_fu_64_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_47 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_58_p2, ap_sig_bdd_47, ap_sig_ioackin_B_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((ap_sig_bdd_47 or ((exitcond_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) and not((exitcond_fu_58_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_58_p2 = ap_const_lv1_0) and not((ap_sig_bdd_47 or ((exitcond_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- A_TREADY assign process. --
    A_TREADY_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_58_p2, ap_sig_bdd_47, ap_sig_ioackin_B_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_58_p2 = ap_const_lv1_0) and not((ap_sig_bdd_47 or ((exitcond_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    B_TDATA <= std_logic_vector(unsigned(A_TDATA) + unsigned(ap_const_lv32_5));

    -- B_TVALID assign process. --
    B_TVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_58_p2, ap_sig_bdd_47, ap_reg_ioackin_B_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_58_p2 = ap_const_lv1_0) and not(ap_sig_bdd_47) and (ap_const_logic_0 = ap_reg_ioackin_B_TREADY))) then 
            B_TVALID <= ap_const_logic_1;
        else 
            B_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_58_p2, ap_sig_bdd_47, ap_sig_ioackin_B_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_sig_bdd_47 or ((exitcond_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) and not((exitcond_fu_58_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_58_p2, ap_sig_bdd_47, ap_sig_ioackin_B_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_sig_bdd_47 or ((exitcond_fu_58_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) and not((exitcond_fu_58_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(B_TREADY, ap_sig_bdd_47)
    begin
                ap_sig_bdd_100 <= (not(ap_sig_bdd_47) and (ap_const_logic_1 = B_TREADY));
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_40 assign process. --
    ap_sig_bdd_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_40 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(A_TVALID, exitcond_fu_58_p2)
    begin
                ap_sig_bdd_47 <= ((A_TVALID = ap_const_logic_0) and (exitcond_fu_58_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_58_p2)
    begin
                ap_sig_bdd_99 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_58_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_40)
    begin
        if (ap_sig_bdd_40) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_B_TREADY assign process. --
    ap_sig_ioackin_B_TREADY_assign_proc : process(B_TREADY, ap_reg_ioackin_B_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_B_TREADY)) then 
            ap_sig_ioackin_B_TREADY <= B_TREADY;
        else 
            ap_sig_ioackin_B_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_58_p2 <= "1" when (i_reg_47 = ap_const_lv6_32) else "0";
    i_1_fu_64_p2 <= std_logic_vector(unsigned(i_reg_47) + unsigned(ap_const_lv6_1));
end behav;
